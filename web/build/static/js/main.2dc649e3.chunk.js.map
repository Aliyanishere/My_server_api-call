{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["baseUrl","window","location","hostname","split","App","classes","makeStyles","theme","root","margin","spacing","width","useStyles","formik","useFormik","initialValues","name","email","password","validationSchema","Yup","required","min","onSubmit","values","console","log","axios","post","then","res","data","setOpen","setToogleUser","toogleUser","useState","users","setUsers","React","open","useEffect","get","catch","err","handleClose","event","reason","action","Fragment","Button","color","size","onClick","className","handleSubmit","noValidate","autoComplete","TextField","type","label","variant","onChange","handleChange","onBlur","handleBlur","value","error","touched","Boolean","errors","helperText","Snackbar","autoHideDuration","onClose","message","map","val","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2dc649e3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@mui/material/Snackbar';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\n\n\nconst dev = \"http://localhost:5000\"\nconst baseUrl = window.location.hostname.split(\":\")[0] === \"localhost\" ? dev : \"\";\n\nfunction App() {\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n        width: '40ch',\n      },\n    },\n  }));\n\n  const classes = useStyles();\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\"\n    },\n    validationSchema: Yup.object({\n      name: Yup\n        .string()\n        .required(\"Please Enter this feild\"),\n      email: Yup\n        .string()\n        .email(\"Please enter valid email\")\n        .required(\"Please enter this feild\"),\n      password: Yup\n        .string()\n        .min(8, \"Password must be 8 digits long\")\n        .required(\"Please enter this feild\")\n    }),\n    onSubmit: (values) => {\n      console.log(\"submit click=>\", values);\n      axios.post(`${baseUrl}/api/v1/login`, {\n        name: values.name,\n        email: values.email,\n        password: values.password\n      })\n        .then((res) => {\n          console.log(res.data);\n          setOpen(true);\n          setToogleUser(!toogleUser);\n        })\n    }\n  })\n\n  const [users, setUsers] = useState([])\n  const [toogleUser, setToogleUser] = useState(false);\n  const [open, setOpen] = React.useState(false);\n\n  useEffect(() => {\n    axios.get(`${baseUrl}/api/v1/users`)\n      .then(res => {\n        console.log(\"users ka array a gaya=>\", res.data);\n        setUsers(res.data);\n      })\n      .catch(err => {\n        console.log(\"error while getting users from server\", err);\n      })\n\n  }, [toogleUser])\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const action = (\n    <React.Fragment>\n      <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n        ‚ùå\n      </Button>\n    </React.Fragment>\n  );\n\n  return (\n    <div className=\"App\">\n      <h1>Signup</h1>\n      <br />\n      <form onSubmit={formik.handleSubmit} className={classes.root} noValidate autoComplete=\"off\">\n        <TextField\n          type=\"text\"\n          color=\"secondary\"\n          label=\"Name\"\n          name=\"name\"\n          variant=\"outlined\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.name}\n          error={formik.touched.name && Boolean(formik.errors.name)}\n          helperText={formik.touched.name && formik.errors.name}\n        /><br />\n        <TextField\n          type=\"email\"\n          color=\"secondary\"\n          label=\"Email\"\n          name=\"email\"\n          variant=\"outlined\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.email}\n          error={formik.touched.email && Boolean(formik.errors.email)}\n          helperText={formik.touched.email && formik.errors.email}\n        /><br />\n        <TextField\n          type=\"password\"\n          color=\"secondary\"\n          label=\"Password\"\n          name=\"password\"\n          variant=\"outlined\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.password}\n          error={formik.touched.password && Boolean(formik.errors.password)}\n          helperText={formik.touched.password && formik.errors.password}\n        /><br />\n        <Button type=\"submit\" variant=\"contained\" color=\"secondary\">\n          Submit\n        </Button>\n      </form>\n      <Snackbar\n        open={open}\n        autoHideDuration={5000}\n        onClose={handleClose}\n        message=\"Profile Created\"\n        action={action}\n      />\n      {users.map((val) => {\n        return (\n          <>\n            <p>{val.name}</p>\n            <p>{val.email}</p>\n            <p>{val.password}</p>\n          </>\n        )\n      })}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}